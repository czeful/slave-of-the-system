{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000\";\n\n// Создаем экземпляр axios с токеном\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Добавляем interceptor для всех запросов\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Авторизация (Логин)\nexport const login = async (email, password) => {\n  return api.post(\"/users/login\", {\n    email,\n    password\n  });\n};\n\n// Регистрация\nexport const register = async (name, email, password, confirm_password) => {\n  return api.post(\"/users/register\", {\n    name,\n    email,\n    password,\n    confirm_password\n  });\n};\n\n// Выход (очистка токена)\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n};\n\n// Проверка OTP\nexport const verifyOTP = async (email, otp) => {\n  console.log(\"Отправка verifyOTP с:\", email, otp);\n  return api.post(\"/verify-otp\", {\n    email,\n    otp\n  });\n};\n\n// Запрос данных с токеном\nexport const getGoals = async () => {\n  return api.get(\"/goals/all?limit=10\");\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","login","email","password","post","register","name","confirm_password","logout","removeItem","verifyOTP","otp","console","log","getGoals","get"],"sources":["C:/Users/zhayl/OneDrive - Astana IT University/Рабочий стол/Front_diplom/frontend/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000\";\r\n\r\n// Создаем экземпляр axios с токеном\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Добавляем interceptor для всех запросов\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Авторизация (Логин)\r\nexport const login = async (email, password) => {\r\n  return api.post(\"/users/login\", { email, password });\r\n};\r\n\r\n// Регистрация\r\nexport const register = async (name, email, password, confirm_password) => {\r\n  return api.post(\"/users/register\", { name, email, password, confirm_password });\r\n};\r\n\r\n// Выход (очистка токена)\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"token\");\r\n};\r\n\r\n// Проверка OTP\r\nexport const verifyOTP = async (email, otp) => {\r\n  console.log(\"Отправка verifyOTP с:\", email, otp);\r\n  return api.post(\"/verify-otp\", { email, otp });\r\n};\r\n\r\n// Запрос данных с токеном\r\nexport const getGoals = async () => {\r\n  return api.get(\"/goals/all?limit=10\");\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,OAAOjB,GAAG,CAACkB,IAAI,CAAC,cAAc,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;AACtD,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,EAAEI,gBAAgB,KAAK;EACzE,OAAOrB,GAAG,CAACkB,IAAI,CAAC,iBAAiB,EAAE;IAAEE,IAAI;IAAEJ,KAAK;IAAEC,QAAQ;IAAEI;EAAiB,CAAC,CAAC;AACjF,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1Bd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOR,KAAK,EAAES,GAAG,KAAK;EAC7CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEX,KAAK,EAAES,GAAG,CAAC;EAChD,OAAOzB,GAAG,CAACkB,IAAI,CAAC,aAAa,EAAE;IAAEF,KAAK;IAAES;EAAI,CAAC,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,OAAO5B,GAAG,CAAC6B,GAAG,CAAC,qBAAqB,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}