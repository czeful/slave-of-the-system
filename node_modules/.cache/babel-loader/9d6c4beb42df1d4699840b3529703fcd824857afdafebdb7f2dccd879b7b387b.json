{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000\";\n\n// Создаем экземпляр axios с токеном\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Добавляем interceptor для всех запросов\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Авторизация (Логин)\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post(\"/users/login\", {\n      email,\n      password\n    });\n    console.log(\"Ответ сервера:\", response.data); // Проверка ответа\n    console.log(\"\");\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Ошибка входа:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// Регистрация\nexport const register = async (username, email, password) => {\n  try {\n    const response = await api.post(\"/users/register\", {\n      username,\n      email,\n      password\n    });\n    console.log(\"Ответ сервера:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Ошибка регистрации:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// Выход (очистка токена)\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n};\n\n// // Проверка OTP\n// export const verifyOTP = async (email, otp) => {\n//   console.log(\"Отправка verifyOTP с:\", email, otp);\n//   return api.post(\"/verify-otp\", { email, otp });\n// };\n\n// Запрос данных с токеном\nexport const getGoals = async () => {\n  return api.get(\"/goals/all?limit=10\");\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","login","email","password","response","post","console","log","data","_error$response","message","register","username","_error$response2","logout","removeItem","getGoals","get"],"sources":["C:/Users/zhayl/OneDrive - Astana IT University/Рабочий стол/Front_diplom/frontend/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000\";\r\n\r\n// Создаем экземпляр axios с токеном\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Добавляем interceptor для всех запросов\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Авторизация (Логин)\r\nexport const login = async (email, password) => {\r\n    try{\r\n        const response = await api.post(\"/users/login\", { email, password });\r\n        console.log(\"Ответ сервера:\", response.data); // Проверка ответа\r\n        console.log(\"\")\r\n        return response.data;   \r\n    }catch (error) {\r\n        console.error(\"Ошибка входа:\", error.response?.data || error.message);\r\n        throw error;\r\n      }\r\n  \r\n};\r\n\r\n// Регистрация\r\nexport const register = async (username, email, password) => {\r\n    try {\r\n      const response = await api.post(\"/users/register\", { username, email, password });\r\n      console.log(\"Ответ сервера:\", response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Ошибка регистрации:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n\r\n// Выход (очистка токена)\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"token\");\r\n};\r\n\r\n// // Проверка OTP\r\n// export const verifyOTP = async (email, otp) => {\r\n//   console.log(\"Отправка verifyOTP с:\", email, otp);\r\n//   return api.post(\"/verify-otp\", { email, otp });\r\n// };\r\n\r\n// Запрос данных с токеном\r\nexport const getGoals = async () => {\r\n  return api.get(\"/goals/all?limit=10\");\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC5C,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,cAAc,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACpEG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAC9CF,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;IACf,OAAOH,QAAQ,CAACI,IAAI;EACxB,CAAC,QAAOV,KAAK,EAAE;IAAA,IAAAW,eAAA;IACXH,OAAO,CAACR,KAAK,CAAC,eAAe,EAAE,EAAAW,eAAA,GAAAX,KAAK,CAACM,QAAQ,cAAAK,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAIV,KAAK,CAACY,OAAO,CAAC;IACrE,MAAMZ,KAAK;EACb;AAEN,CAAC;;AAED;AACA,OAAO,MAAMa,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEV,KAAK,EAAEC,QAAQ,KAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,iBAAiB,EAAE;MAAEO,QAAQ;MAAEV,KAAK;MAAEC;IAAS,CAAC,CAAC;IACjFG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC5C,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA,IAAAe,gBAAA;IACdP,OAAO,CAACR,KAAK,CAAC,qBAAqB,EAAE,EAAAe,gBAAA,GAAAf,KAAK,CAACM,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAIV,KAAK,CAACY,OAAO,CAAC;IAC3E,MAAMZ,KAAK;EACb;AACF,CAAC;;AAGH;AACA,OAAO,MAAMgB,MAAM,GAAGA,CAAA,KAAM;EAC1BpB,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,OAAO9B,GAAG,CAAC+B,GAAG,CAAC,qBAAqB,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}